{"version":3,"sources":["js/dispatcher/AppDispatcher.js","js/stores/MessageStore.js","js/actions/MessageActions.js","js/components/AddWindow.js","js/components/MessageMenuTab.js","app.js","serviceWorker.js","index.js"],"names":["Dispatcher","dispatchToken","AppDispatcher","register","dispatcherCallback","bind","eventName","this","emit","messages","user_id","filtered","Object","filter","obj","predicate","fromEntries","entries","receiver","sender","action","type","handleNotification","variant","content","emitChange","callback","on","removeListener","store","addNotification","message","insert","container","animationIn","animationOut","dismiss","duration","require","EventEmitter","subject","$","ajax","dataType","url","data","success","response","dispatch","value","responseText","error","jqXHR","textStatus","errorThrown","alert","id","AddWindow","handleClose","setState","show","handleShow","state","handleChange","onSubmit","cleanForm","e","preventDefault","length","MessageActions","sendMessage","props","target","MessageStore","addChangeListener","className","onClick","Modal","onHide","Header","closeButton","Title","Body","onChange","maxlength","placeholder","Footer","Button","React","Component","MessageMenuTab","onRemoveConfirm","onRemove","size","creation_date","MessageView","App","selected_message","message_type","sent_messages","received_messages","onChangeMessages","messageTabClick","onRemoveMessage","displaySentMessages","changeMessageType","displayReceivedMessages","onMessageAction","loadData","getAllReceived","getAllSent","t","removeChangeListener","i","removeMessage","listItems","keys","map","key","userIdChange","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.272498c3.chunk.js","sourcesContent":["import { Dispatcher } from 'flux';\nexport default new Dispatcher();","import AppDispatcher from '../dispatcher/AppDispatcher'\nimport {store} from 'react-notifications-component'\nvar EventEmitter = require('events').EventEmitter;\n\nclass MessageStore extends EventEmitter {\n    constructor() {\n        super();\n        this.dispatchToken = AppDispatcher.register(this.dispatcherCallback.bind(this));\n    }\n    emitChange(eventName) {\n        this.emit(eventName);\n    }\n\n\tgetAll() {\n\t    return this.messages;\n\t}\n\n\tgetAllReceived(user_id) {\n        var filtered = {};\n\n        if (this.messages) {\n    \t\tObject.filter = (obj, predicate) => \n                      Object.fromEntries(Object.entries(obj).filter(predicate));\n            filtered = Object.filter(this.messages, ([name, obj]) => obj.receiver === user_id); \n        }\n\t\treturn filtered;\n\t}\n\n\tgetAllSent(user_id) {\n        var filtered = {};\n        if (this.messages) {\n    \t\tObject.filter = (obj, predicate) => \n                      Object.fromEntries(Object.entries(obj).filter(predicate));\n            filtered = Object.filter(this.messages, ([name, obj]) => obj.sender === user_id); \n        }\n\t\treturn filtered;\n\t}\n\n\tdispatcherCallback(action) {\n        switch (action.type) {\n            case \"MESSAGES_FETCHED\":\n            \tthis.messages = action.messages;\n        \t\tbreak;\n            case \"NOTIFICATION\":\n                this.handleNotification(action.variant, action.content);\n                break;\n        \tdefault:\n        \t\tbreak;\n        }\n\n\t\tthis.emitChange(action.type);\n\n        return true;\n    }\n\n    addChangeListener(eventName, callback) {\n        this.on(eventName, callback);\n    }\n \n    removeChangeListener(eventName, callback) {\n        this.removeListener(eventName, callback);\n    }\n\n    handleNotification(variant, content) {\n        store.addNotification({\n              message: content,\n              type: variant,\n              insert: \"top\",\n              container: \"top-right\",\n              animationIn: [\"animated\", \"fadeIn\"],\n              animationOut: [\"animated\", \"fadeOut\"],\n              dismiss: {\n                duration: 2500,\n              }\n        });\n    }\n \n}\nexport default new MessageStore();","import AppDispatcher from '../dispatcher/AppDispatcher';\n\nimport $ from 'jquery';\n\nclass MessageActions {\n\n\tsendMessage(sender, receiver, subject, content) {\n\t\t$.ajax({\n\t\t\ttype:    \"POST\",\n\t\t\tdataType: \"json\",\n\t\t\turl:     \"/send\",\n\t\t\tdata:    { \"sender\": sender, \"receiver\" : receiver, \"subject\": subject, \"content\": content},\n\t\t\tsuccess: function(response) {\n\t\t    \tif (response === \"done\")\n\t\t    \t{\n\t\t        \tAppDispatcher.dispatch({type: \"MESSAGE_SENT\"});\n\t\t    \t\tAppDispatcher.dispatch({type:\"NOTIFICATION\", variant: \"success\", content: \"Message Sent!\"});\n\t\t    \t}\n\n\t\t        else\n\t\t        \tAppDispatcher.dispatch({ type: \"danger\", value: \"Error: \" + response.responseText });\n\t\t       },\n\t\t\terror: function(jqXHR, textStatus, errorThrown) {\n\t\t\t    alert(\"Error, status = \" + textStatus + \", \" +\n\t\t\t\t    \"error thrown: \" + errorThrown\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n    removeMessage(id)\n    {\n\t\t$.ajax({\n\t\t\ttype:    \"POST\",\n\t\t\tdataType: \"json\",\n\t\t\turl:     \"/delete\",\n\t\t\tdata:    {\"message_id\": id},\n\t\t\tsuccess: function(response) {\n\t\t    \tif (response === \"done\") {\n\t\t        \tAppDispatcher.dispatch({type: \"MESSAGE_DELETED\"});\n\t\t        \tAppDispatcher.dispatch({type:\"NOTIFICATION\", variant: \"success\", content: \"Message deleted!\"});\n\t\t        }\n\t\t        else\n\t\t        \tAppDispatcher.dispatch({type:\"NOTIFICATION\", variant: \"danger\", content: \"Error: \" + response});\n\t\t   \t},\n\t\t\terror: function(jqXHR, textStatus, errorThrown) {\n\t\t\t    alert(\"Error, status = \" + textStatus + \", \" +\n\t\t\t\t    \"error thrown: \" + errorThrown\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n    }\n\n    loadData(user_id) {\n\t\t$.ajax({\n\t\t\ttype: \"POST\",\n\t\t\tdataType: \"json\",\n\t\t\turl: \"/messages\",\n\t\t\tdata: {user_id:user_id},\n\t\t\tsuccess: function(response) {\n\t\t\t\tAppDispatcher.dispatch({ type: \"MESSAGES_FETCHED\", messages: response });\n\t\t\t},\n\t\t\terror: function(jqXHR, textStatus, errorThrown) {\n\t\t\t    alert(\"Error, status = \" + textStatus + \", \" +\n\t\t\t\t    \"error thrown: \" + errorThrown\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}\n\n  \n\nexport default new MessageActions()","import React from 'react'\nimport MessageActions from '../actions/MessageActions';\nimport MessageStore from '../stores/MessageStore'\nimport {Modal, Button} from \"react-bootstrap\"\n\nclass AddWindow extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.handleClose = () => this.setState({show: false});\n\t\tthis.handleShow = () => this.setState({show: true});\n\t\tthis.state = {receiver:\"\", subject:\"\", content:\"\", show:false, error: \"\"};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t\tthis.cleanForm = this.cleanForm.bind(this);\n\t}\n\tonSubmit(e) {\n\t\te.preventDefault();\n\t\tif (this.state.receiver === \"\")\n\t\t\tthis.setState({error:\"Receiver ID must not be empty\"})\n\t\telse if (this.state.subject === \"\")\n\t\t\tthis.setState({error:\"Subject must not be empty\"})\n\t\telse if (this.state.content.length < 5)\n\t\t\tthis.setState({error:\"Message content must contain at least 5 chars\"})\n\t\telse\n\t\t\tMessageActions.sendMessage(this.props.sender, this.state.receiver, this.state.subject, this.state.content);\n\n\t}\n\tcleanForm() {\n\t\tthis.handleClose();\n\t\tthis.setState({receiver:\"\", subject:\"\", content:\"\", error:\"\"});\n\t}\n\thandleChange(e) {\n\t\tthis.setState({[e.target.id]: e.target.value})\n\t}\n\n    componentDidMount() {\n        MessageStore.addChangeListener(\"MESSAGE_SENT\", this.cleanForm);\n    }\n\n\trender() {\n\t\treturn <div>\n\t\t\t<div className=\"fa fa-plus-circle fa-4x\" variant=\"primary\" onClick={this.handleShow}></div>\n\t\t\t<Modal show={this.state.show} onHide={this.handleClose}>\n\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t<Modal.Title>New Message</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input type=\"text\" onChange={this.handleChange} maxlength=\"16\" id=\"receiver\" className=\"form-control mb-3\" placeholder=\"Receiver ID\" value={this.state.receiver} />\n\t\t\t\t\t\t<input type=\"text\" onChange={this.handleChange} maxlength=\"30\" id=\"subject\" className=\"form-control mb-3\" placeholder=\"Subject\" value={this.state.subject} />\n\t\t\t\t\t\t<textarea className=\"form-control mb-3\"  onChange={this.handleChange} id=\"content\" value={this.state.content} placeholder=\"Message content...\" id=\"content\"></textarea>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div className=\"float-left text-danger\">{this.state.error && \"* \" +this.state.error }</div>\n\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant=\"secondary\" onClick={this.handleClose}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"primary\" onClick={this.onSubmit}>\n\t\t\t\t\t\tSend\n\t\t\t\t\t</Button>\n\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</div>;\n\t}\n\n}\n\nexport default AddWindow;","import React from 'react'\nimport {Modal, Button} from \"react-bootstrap\"\n\n\n\nclass MessageMenuTab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onRemoveConfirm = this.onRemoveConfirm.bind(this);\n        this.state = {show: false};\n        this.handleClose = () => this.setState({show: false});\n\t\tthis.handleShow = () => this.setState({show: true});\n    }\n\n    onClick() {\n        this.props.onClick(this.props.id);\n    }\n    onRemoveConfirm() {\n    \tthis.props.onRemove(this.props.id);\n    }\n    render() {\n        return <li className=\"list-group-item message-tab\" onClick={this.onClick}>\n\t\t\t\t\t<Modal show={this.state.show} onHide={this.handleClose} size=\"sm\">\n\t\t\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t\t<Modal.Title>Are you sure?</Modal.Title>\n\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.handleClose} >\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</Button>{' '}\n\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={this.onRemoveConfirm}>\n\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t</Modal>\n\t            <div className=\"data p-2\">\n\t                {this.props.data.subject}\n\t                <div className=\"date\">{this.props.data.creation_date}</div>\n\t            </div>\n           \t\t<div className=\"icon\"><i className=\"fa fa-remove\" onClick={this.handleShow}></i></div>\n        </li>\n    }\n}\n\nexport default MessageMenuTab;","import React from 'react'\nimport MessageStore from './js/stores/MessageStore'\nimport MessageActions from './js/actions/MessageActions';\nimport AddWindow from './js/components/AddWindow'\nimport MessageMenuTab from './js/components/MessageMenuTab'\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\nimport \"./App.css\";\n\n\nclass MessageView extends React.Component {\n    render() {\n        return <div className=\"card p-5\">\n                        <header><h3>{this.props.data.subject}</h3></header>\n                        <div className=\"\"><h6>From: {this.props.data.sender}</h6><h6>to: {this.props.data.receiver}</h6></div><br />\n                        <div><h5>{this.props.data.content}</h5></div>\n                </div>;\n    }\n}\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {user_id: \"aaa@gmail.com\", selected_message: \"\", message_type: \"received\", messages: {}, sent_messages: {}, received_messages: {}};\n        this.onChangeMessages = this.onChangeMessages.bind(this);\n        this.messageTabClick = this.messageTabClick.bind(this);\n        this.onRemoveMessage = this.onRemoveMessage.bind(this);\n        this.displaySentMessages = this.changeMessageType.bind(this, \"sent\");\n        this.displayReceivedMessages = this.changeMessageType.bind(this, \"received\");\n        this.onMessageAction = this.onMessageAction.bind(this);\n    }\n    \n    onMessageAction() {\n        MessageActions.loadData(this.state.user_id);\n    }\n\n    onChangeMessages() {\n        if (this.state.message_type === \"received\")\n            this.setState({messages: MessageStore.getAllReceived(this.state.user_id), selected_message: \"\"});\n        else \n            this.setState({messages: MessageStore.getAllSent(this.state.user_id), selected_message: \"\"});\n    }\n\n    changeMessageType(t) {\n        if (t === \"received\" && this.state.message_type !== \"received\") \n            this.setState({selected_message: \"\", messages: MessageStore.getAllReceived(this.state.user_id), message_type: \"received\"});\n        else if (t === \"sent\" && this.state.message_type !== \"sent\") \n            this.setState({selected_message: \"\", messages: MessageStore.getAllSent(this.state.user_id), message_type: \"sent\"});\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeChangeListener(\"MESSAGES_FETCHED\", this.onChangeMessages);\n        MessageStore.removeChangeListener(\"MESSAGE_DELETED\", this.onMessageAction);\n        MessageStore.removeChangeListener(\"MESSAGE_SENT\", this.onMessageAction);\n    }\n\n    componentDidMount() {\n        MessageStore.addChangeListener(\"MESSAGES_FETCHED\", this.onChangeMessages);\n        MessageStore.addChangeListener(\"MESSAGE_DELETED\", this.onMessageAction);\n        MessageStore.addChangeListener(\"MESSAGE_SENT\", this.onMessageAction);\n        MessageActions.loadData(this.state.user_id);\n    }\n\n    userIdChange(e) {\n        this.setState({user_id: e.target.value});\n        MessageActions.loadData(e.target.value);\n\n    }\n    messageTabClick(i) {\n        this.setState({selected_message: i});\n    }\n\n    onRemoveMessage(i) {\n        MessageActions.removeMessage(i);\n    }\n\n    render() {\n        const listItems = Object.keys(this.state.messages).map((i) =>\n         <MessageMenuTab onClick={this.messageTabClick} onRemove={this.onRemoveMessage} key={i} id={i} data={this.state.messages[i]} />);\n        return <div className=\"wrapper\"><ReactNotification />\n                    \n                    <nav id=\"sidebar\" className=\"d-flex flex-column\">\n\n                        <li className=\"list-group-item\">Who are you? <input type=\"text\" className=\"form-control\" id=\"userid\" onChange={this.userIdChange.bind(this)} value={this.state.user_id} /></li>\n                        <div className=\"list-group list-group-horizontal d-flex\">\n                          <button id=\"receivedbtn\"  onClick={this.displayReceivedMessages}\n                           className={`list-group-item flex-fill rounded-0 ${this.state.message_type === \"received\" ? 'active' : ''}`}> Received \n                            <span className=\"badge\">{Object.keys(MessageStore.getAllReceived(this.state.user_id)).length}</span>\n                          </button>\n                          <button href=\"#\" id=\"sentbtn\" onClick={this.displaySentMessages}\n                          className={`list-group-item flex-fill rounded-0 ${this.state.message_type === \"sent\" ? 'active' : ''}`}> Sent \n                            <span className=\"badge\">{Object.keys(MessageStore.getAllSent(this.state.user_id)).length}</span>\n                          </button>\n                        </div>\n                        {listItems} \n                        \n                    </nav>\n                <div className=\"content\">\n                    {this.state.selected_message ? <MessageView data={this.state.messages[this.state.selected_message]} /> : <div className=\"banner\">Simple Message</div>}\n                    <AddWindow sender={this.state.user_id}/>\n                </div>\n            </div>;\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}