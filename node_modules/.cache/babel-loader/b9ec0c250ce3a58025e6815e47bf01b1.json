{"ast":null,"code":"import AppDispatcher from '../dispatcher/AppDispatcher';\nimport { store } from 'react-notifications-component';\n\nvar EventEmitter = require('events').EventEmitter;\n\nclass MessageStore extends EventEmitter {\n  constructor() {\n    super();\n    this.dispatchToken = AppDispatcher.register(this.dispatcherCallback.bind(this));\n  }\n\n  emitChange(eventName) {\n    this.emit(eventName);\n  }\n\n  getAll() {\n    return this.messages;\n  }\n\n  getAllReceived(user_id) {\n    var filtered = {};\n\n    if (this.messages) {\n      Object.filter = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(predicate));\n\n      filtered = Object.filter(this.messages, ([name, obj]) => obj.receiver === user_id);\n    }\n\n    return filtered;\n  }\n\n  getAllSent(user_id) {\n    var filtered = {};\n\n    if (this.messages) {\n      Object.filter = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(predicate));\n\n      filtered = Object.filter(this.messages, ([name, obj]) => obj.sender === user_id);\n    }\n\n    return filtered;\n  }\n\n  dispatcherCallback(action) {\n    switch (action.type) {\n      case \"MESSAGES_FETCHED\":\n        this.messages = action.messages;\n        break;\n\n      case \"NOTIFICATION\":\n        this.handleNotification(action.variant, action.content);\n        break;\n\n      default:\n        break;\n    }\n\n    this.emitChange(action.type);\n    return true;\n  }\n\n  addChangeListener(eventName, callback) {\n    this.on(eventName, callback);\n  }\n\n  removeChangeListener(eventName, callback) {\n    this.removeListener(eventName, callback);\n  }\n\n  handleNotification(variant, content) {\n    store.addNotification({\n      message: content,\n      type: variant,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: 2500\n      }\n    });\n  }\n\n}\n\nexport default new MessageStore();","map":{"version":3,"sources":["/home/alon/dev/Alon-Hasson-31-05-2020/src/js/stores/MessageStore.js"],"names":["AppDispatcher","store","EventEmitter","require","MessageStore","constructor","dispatchToken","register","dispatcherCallback","bind","emitChange","eventName","emit","getAll","messages","getAllReceived","user_id","filtered","Object","filter","obj","predicate","fromEntries","entries","name","receiver","getAllSent","sender","action","type","handleNotification","variant","content","addChangeListener","callback","on","removeChangeListener","removeListener","addNotification","message","insert","container","animationIn","animationOut","dismiss","duration"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher/AppDispatcher'\nimport {store} from 'react-notifications-component'\nvar EventEmitter = require('events').EventEmitter;\n\nclass MessageStore extends EventEmitter {\n    constructor() {\n        super();\n        this.dispatchToken = AppDispatcher.register(this.dispatcherCallback.bind(this));\n    }\n    emitChange(eventName) {\n        this.emit(eventName);\n    }\n\n\tgetAll() {\n\t    return this.messages;\n\t}\n\n\tgetAllReceived(user_id) {\n        var filtered = {};\n\n        if (this.messages) {\n    \t\tObject.filter = (obj, predicate) => \n                      Object.fromEntries(Object.entries(obj).filter(predicate));\n            filtered = Object.filter(this.messages, ([name, obj]) => obj.receiver === user_id); \n        }\n\t\treturn filtered;\n\t}\n\n\tgetAllSent(user_id) {\n        var filtered = {};\n        if (this.messages) {\n    \t\tObject.filter = (obj, predicate) => \n                      Object.fromEntries(Object.entries(obj).filter(predicate));\n            filtered = Object.filter(this.messages, ([name, obj]) => obj.sender === user_id); \n        }\n\t\treturn filtered;\n\t}\n\n\tdispatcherCallback(action) {\n        switch (action.type) {\n            case \"MESSAGES_FETCHED\":\n            \tthis.messages = action.messages;\n        \t\tbreak;\n            case \"NOTIFICATION\":\n                this.handleNotification(action.variant, action.content);\n                break;\n        \tdefault:\n        \t\tbreak;\n        }\n\n\t\tthis.emitChange(action.type);\n\n        return true;\n    }\n\n    addChangeListener(eventName, callback) {\n        this.on(eventName, callback);\n    }\n \n    removeChangeListener(eventName, callback) {\n        this.removeListener(eventName, callback);\n    }\n\n    handleNotification(variant, content) {\n        store.addNotification({\n              message: content,\n              type: variant,\n              insert: \"top\",\n              container: \"top-right\",\n              animationIn: [\"animated\", \"fadeIn\"],\n              animationOut: [\"animated\", \"fadeOut\"],\n              dismiss: {\n                duration: 2500,\n              }\n        });\n    }\n \n}\nexport default new MessageStore();"]},"metadata":{},"sourceType":"module"}